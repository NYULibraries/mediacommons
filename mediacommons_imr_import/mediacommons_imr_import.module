<?php

include_once "mediacommons_imr_import.install";
include_once "include/mediacommons_imr_import.datasource.inc";
include_once "include/mediacommons_imr_import.create.inc";
include_once "include/mediacommons_imr_import.delete.inc";

/**
 * Assuming you have already a local copy of the site database, your settings.php should looks something like this:
 *
 $databases['drupal6'] = array(
   'default' => array(
     'database' => 'db_name',
     'username' => 'your_user',
     'password' => 'your_password',
     'host' => '127.0.0.1',
     'port' => '',
     'driver' => 'mysql',
     'prefix' => 'prefix_',
   ),
 );
 
 OR
 
 $databases['drupal6'] = array(
   'default' => array(
     'database' => 'db_name',
     'username' => 'your_user',
     'password' => 'your_password',
     'host' => 'localhost',
     'port' => '',
     'driver' => 'mysql',
     'prefix' => array(
       'default'   => 'prefix_',
       'authmap' => 'shared_db.shared_prefix_',
       'profile_fields' => 'shared_db.shared_prefix_',
       'profile_values' => 'shared_db.shared_prefix_',
       'sequences' => 'shared_db.shared_prefix_',
       'sessions' => 'shared_db.shared_prefix_',
       'users' => 'shared_db.shared_prefix_',
     ),
   ),
 );
 
 */
function mediacommons_imr_import_d6_configured() {
  global $databases;
  if (!isset($databases['drupal6'])) {
    drush_set_error('About to die like a coward. Unable to find Drupal 6 database.');
    drush_die();
  }
  else {
    return TRUE;
  }
}

function mediacommons_imr_import_prepare() {
  global $settigs;  
  $settigs = mediacommons_imr_import_settings();
  $schemas = mediacommons_imr_import_schema();
  mediacommons_imr_import_initialize_schema('mediacommons_imr_import', $schemas);
  foreach ($schemas as $name => $schema) {
    if (!db_table_exists($name)) {
      db_create_table($name, $schema);
    }
  }
}

function mediacommons_imr_import_settings() {
  $script = pathinfo(__FILE__);
  $settigs = array();
  $settigs = json_decode(utf8_encode(file_get_contents($script['dirname'] . '/settigs.json')), true);
  $settigs['script_path'] = $script;
  return $settigs;
}

/** Return a plain node template */
function _mediacommons_imr_import_setup_node($type) {
  $node = new StdClass();
  $node->type = $type;
  $node->language = LANGUAGE_NONE;
  $node->promote = 0;
  $node->sticky = 0;
  /** Fills in a few default values */
  node_object_prepare($node);  
  return $node;
}

function mediacommons_imr_import_initialize_schema($module, &$schema) {
  // Set the name and module key for all tables.
  foreach ($schema as $name => $table) {
    if (empty($table['module'])) {
      $schema[$name]['module'] = $module;
    }
    if (!isset($table['name'])) {
      $schema[$name]['name'] = $name;
    }
  }
}

function mediacommons_imr_import_run($task) {
  switch ($task) {

    case 1 :
      drush_print('Import D6 Content (all the stepts)');

      /** Import all users */
      drush_print('Importing roles');
      mediacommons_imr_import_generate_roles();
      
      /** Import all users */
      drush_print('Importing all users');
      mediacommons_imr_import_generate_all_users();      

      /** Import vocabulary */
      drush_print('Importing vocabulary');
      mediacommons_imr_import_generate_vocabulary();
      
      /** Import terms */
      drush_print('Importing terms');
      mediacommons_imr_import_generate_terms();

      /** Import hubs */
      drush_print('Importing hubs');
      mediacommons_imr_import_generate_hubs();
      
      /** Import spokes */
      drush_print('Importing spokes');
      mediacommons_imr_import_generate_spokes();
      
      break;
      
    case 2 :
      drush_print('Importing vocabulary');
      mediacommons_imr_import_generate_vocabulary();
      break;

    case 3 :
      drush_print('Importing terms');
      mediacommons_imr_import_generate_terms();
      break;
      
    case 4 :
      drush_print('Importing roles');
      mediacommons_imr_import_generate_roles();
      break;
      
    case 5 :
      drush_print('Importing users');
      mediacommons_imr_import_generate_all_users();      
      break;

    case 6 :
      drush_print('Import D6 Clusters');
      mediacommons_imr_import_generate_hubs();
      break;
      
    case 7 :
      drush_print('Import D6 post');
      mediacommons_imr_import_generate_spokes();
      break;      

    case 9 :
      drush_print('Cleaning house'); 
      mediacommons_imr_import_delete_content();
      
    case 16 :
      drush_print('Deleting all users');
      mediacommons_imr_import_delete_users();
      
      break;
      
    case 15 :
      drush_print('Generating random hubs and spokes');
      mediacommons_imr_import_generate_random_content();
      break;

    case 17 :
      drush_print('Deleting all hubs and spokes');
      mediacommons_imr_import_delete_content();
      break;
      
    case 18 :
      drush_print('Deleting hubs, spokes  and users');
      mediacommons_imr_import_delete_users();
      mediacommons_imr_import_delete_content();
      break;
      
    case 0 :
      drush_print('Running test:' . time());
      
      mediacommons_imr_import_delete_comments();
      mediacommons_imr_import_delete_post();
      
      return;
      
      $onid = 18;
      
      $nodes_records = $users_records = array();
      $nodes = db_query("SELECT * FROM {mediacommons_imr_import_node_map}");
      $users = db_query("SELECT * FROM {mediacommons_imr_import_user_map}");
      $comments = Database::getConnection('default', 'drupal6')->query('SELECT * FROM {comments} WHERE nid = :nid', array(':nid' => $onid), array());      
            
      foreach ($nodes as $node) {
        if ($node->onid == 18) {
          drush_print_r($node);
        }
        $nodes_records[$node->onid] = $node->nid;
      }
      
      return;
  
      foreach ($users as $user) {
        $users_records[$user->ouid] = $user->uid;
      }
      
      foreach ($comments as $comment) {
        
        drush_print(url('node/' . $comment->nid, array('absolute' => TRUE)));
        
        drush_print($nodes_records['n' . $comment->nid]);
        
        drush_print($comment->nid);
        
        $new_comment = (object) array(
          'nid' => 22,
          'cid' => 0,
          'pid' => 0,
          'uid' => $users_records[$comment->uid],
          'mail' => $comment->mail,
          'is_anonymous' => 0,
          'homepage' =>  $comment->homepage,
          'status' => ($comment->status == 0) ? 1 : 0,
          'subject' => $comment->subject,
          'language' => LANGUAGE_NONE,
          'thread' => $comment->thread,
          'hostname' => $comment->hostname,
          'comment_body' => array(
            LANGUAGE_NONE => array(
              0 => array (
                'value' => $comment->comment,
                'format' => 'filtered_html'
              ),
            ),
          ),
        );
        
        comment_submit($new_comment);
        comment_save($new_comment);
        
      }
      
      break;

    default :
      drush_print('');
      drush_print('ERROR: Unable to perform task');
      drush_print('');
      mediacommons_imr_import_show_options();
      break;
  }
}

function mediacommons_imr_import_show_help() {
  drush_print('');
  drush_print(t('[1] Import D6 Content (all the stepts)'));
  drush_print(t('[2] Import vocabulary'));
  drush_print(t('[3] Import terms'));  
  drush_print(t('[4] Import roles'));
  drush_print(t('[5] Import users'));
  drush_print(t('[6] Import Hubs'));
  drush_print(t('[7] Import Post'));
  drush_print(t('[9]Clean house'));
  drush_print(t('[0] Run test'));
  drush_print('');
}

function mediacommons_imr_import_show_options() {
  drush_print(t('Please type one of the following options to continue:'));
  mediacommons_imr_import_show_help();
  $handle = fopen ("php://stdin","r");
  $line = fgets($handle);
  mediacommons_imr_import_run(trim($line));
}

function mediacommons_imr_import_init() {
  mediacommons_imr_import_prepare();
  $args = func_get_args();
  if (isset($args[1])) {
    mediacommons_imr_import_run($args[1]);
  }
  else {
    mediacommons_imr_import_show_options();
  }
}

mediacommons_imr_import_init();