<?php

/**
 * Assuming you have already a local copy of the site database, your settings.php should looks something like this:
 *
 * $databases['drupal6'] = array(
 *  'default' => array(
 *    'database' => 'db_name',
 *    'username' => 'your_user',
 *    'password' => 'your_password',
 *    'host' => '127.0.0.1',
 *    'port' => '',
 *    'driver' => 'mysql',
 *    'prefix' => 'prefix_',
 *  ),
 * );
 *
 * OR
 *
 * $databases['drupal6'] = array(
 *  'default' => array(
 *    'database' => 'db_name',
 *    'username' => 'your_user',
 *    'password' => 'your_password',
 *    'host' => 'localhost',
 *    'port' => '',
 *    'driver' => 'mysql',
 *    'prefix' => array(
 *      'default'   => 'prefix_',
 *      'authmap' => 'shared_db.shared_prefix_',
 *      'profile_fields' => 'shared_db.shared_prefix_',
 *      'profile_values' => 'shared_db.shared_prefix_',
 *      'sequences' => 'shared_db.shared_prefix_',
 *      'sessions' => 'shared_db.shared_prefix_',
 *      'users' => 'shared_db.shared_prefix_',
 *    ),
 *  ),
 * );
 */
function mediacommons_base_import_d6_configured() {

  global $databases;

  if ( isset ( $databases['drupal6'] ) ) return TRUE ;

  drush_log( 'Unable to find Drupal 6 database.' , 'error' );

  die ();

}

 function mediacommons_base_import_get_content($URL) {
   $ch = curl_init();
   curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
   curl_setopt($ch, CURLOPT_URL, $URL);
   $data = curl_exec($ch);
   curl_close($ch);
   return $data;
}

function mediacommons_base_import_curl($URL) {
	return mediacommons_base_import_get_content($URL);
}

function mediacommons_base_import_default_commands() {
  return array(
    array(
      'label' => t('Import vocabulary'),
      'callback' => array(
        'mediacommons_base_import_generate_vocabulary',
      ),
    ),
    array(
      'label' => t('Import terms'),
      'callback' => array(
        'mediacommons_base_import_generate_terms',
      ),
    ),
    array(
      'label' => t('Import roles'),
      'callback' => array(
        'mediacommons_base_import_generate_roles',
      ),
    ),
    array(
      'label' => t('Import users'),
      'callback' => array(
        'mediacommons_base_import_generate_all_users',
      	'mediacommons_base_import_migrate_user_realname',
      	'_mediacommons_base_import_prepare_taxonomy_fields',
      	'mediacommons_base_import_migrate_profile_fields',
      ),
    ),

  	array( 'label' => t('Test'), 'callback' => array( 'mediacommons_base_import_generate_all_users', ), ),

  );
}

function mediacommons_base_import_prepare($caller) {

  include_once('include/mediacommons_base_import.install');
  include_once "include/mediacommons_base_import.datasource.inc";
  include_once "include/mediacommons_base_import.create.inc";
  include_once "include/mediacommons_base_import.delete.inc";
  include_once "include/mediacommons_base_import.profile.inc";
  include_once "include/mediacommons_base_import.random.inc";

  global $settigs; // while I find them all
  global $settings;

  $settings = $settigs = mediacommons_base_import_settings($caller);

  foreach ($settings['dependencies'] as $dependency) {
    if(!module_exists($dependency)) {
      drush_set_error(
        t('About to die like a coward. Dependency @dependency not met.', array('@dependency' => $dependency))
      );
      die();
    }
  }

  $schemas = mediacommons_base_import_schema();

  $install_file = $settigs['script_path']['dirname'] . '/include/' . $settigs['script_path']['filename'] . '.install';

  $includes = file_scan_directory($settigs['script_path']['dirname'], '/.*\.inc$/');

  foreach ($includes as $include) {
    include_once($include->uri);
  }

  if (file_exists($install_file)) {
    include_once($install_file);
    $call = $settigs['script_path']['filename'] . '_schema';
    if (function_exists($call)) {
      $schemas += $call();
    }
  }

  mediacommons_base_import_initialize_schema($settigs['script_path']['filename'], $schemas);

  foreach ($schemas as $name => $schema) {
    if (!db_table_exists($name)) {
      db_create_table($name, $schema);
    }
  }

}

function mediacommons_base_import_settings($caller) {
  $script = pathinfo($caller);
  $settigs = array();
  $settigs = json_decode(utf8_encode(file_get_contents($script['dirname'] . '/settings.json')), true);
  $settigs['script_path'] = $script;
  return $settigs;
}

/** Return a plain node template */
function _mediacommons_base_import_setup_node($type) {
  $node = new StdClass();
  $node->type = $type;
  $node->language = LANGUAGE_NONE;
  $node->promote = 0;
  $node->sticky = 0;
  /** Fills in a few default values */
  node_object_prepare($node);
  return $node;
}

function mediacommons_base_migrate_truncate($string, $limit, $pad = '...') {

  if (strlen($string) <= $limit) return $string;

  return trim(substr($string, 0, $limit)) .  $pad;

}


function mediacommons_base_import_initialize_schema($module, &$schema) {
  // Set the name and module key for all tables.
  foreach ($schema as $name => $table) {
    if (empty($table['module'])) {
      $schema[$name]['module'] = $module;
    }
    if (!isset($table['name'])) {
      $schema[$name]['name'] = $name;
    }
  }
}

function mediacommons_base_import_run($task, array $commands = array()) {
  if (isset($commands[$task]) && isset($commands[$task]['callback'])) {
    foreach ($commands[$task]['callback'] as $callback) {
      if (function_exists($callback)) {
        $callback();
      }
    }
  }
  else {
    drush_print('');
    drush_print(t('ERROR: Unable to perform task'));
    drush_print('');
    mediacommons_base_import_show_options($commands);
  }
}

function mediacommons_base_import_show_help(array $commands = array()) {
  drush_print('');
  foreach ($commands as $key => $option) {
    drush_print('[' . $key . '] ' . $option['label']);
  }
  drush_print('');
}

function mediacommons_base_import_show_options(array $commands = array()) {
  drush_print(t('Please type one of the following options to continue:'));
  mediacommons_base_import_show_help($commands);
  $handle = fopen ("php://stdin","r");
  $line = fgets($handle);
  mediacommons_base_import_run(trim($line), $commands);
}

function mediacommons_base_import_init(array $options = array()) {

  // We need extra memory for GD
  ini_set("memory_limit", "512MM");

  mediacommons_base_import_d6_configured();

  $trace = debug_backtrace();

  $caller = (isset($trace[0]['file']) ? $trace[0]['file'] : __FILE__);

  $task = drush_get_option('task');

  $default_commands = mediacommons_base_import_default_commands();

  $commands = array_merge($default_commands, $options['commands']);

  // Add exit command to end of the commands options
  $commands[] = array(
    'label' => t('Exit'),
    'callback' => array(
      'drush_exit',
    ),
  );

  mediacommons_base_import_prepare($caller);

  if ( $task ) {

    $action = FALSE;

    foreach ($commands as $key => $command) {

      if ($commands[$key]['label'] == $task) {
        $action = $key;
      }

    }

    if ($action) {
      mediacommons_base_import_run($action, $commands);
    }

    else {
      drush_log('Unable to load task', 'error');
    }

  }
  else {
    mediacommons_base_import_show_options($commands);
  }
}

$trace = debug_backtrace();

$caller = (isset($trace[0]['file']) ? $trace[0]['file'] : __FILE__);

/**
 * This script is meant to be "extended", not to be used by itself.
 */
if (preg_match('/core.drush.inc/', $caller)) {

  drush_print(t('Mama\' told me never talk to strangers!'));

}