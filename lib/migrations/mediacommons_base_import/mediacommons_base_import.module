<?php

/**
 * Assuming you have already a local copy of the site database, your settings.php should looks something like this:
 *
 * $databases['drupal6'] = array(
 *  'default' => array(
 *    'database' => 'db_name',
 *    'username' => 'your_user',
 *    'password' => 'your_password',
 *    'host' => '127.0.0.1',
 *    'port' => '',
 *    'driver' => 'mysql',
 *    'prefix' => 'prefix_',
 *  ),
 * );
 *
 * OR
 *
 * $databases['drupal6'] = array(
 *  'default' => array(
 *    'database' => 'db_name',
 *    'username' => 'your_user',
 *    'password' => 'your_password',
 *    'host' => 'localhost',
 *    'port' => '',
 *    'driver' => 'mysql',
 *    'prefix' => array(
 *      'default'   => 'prefix_',
 *      'authmap' => 'shared_db.shared_prefix_',
 *      'profile_fields' => 'shared_db.shared_prefix_',
 *      'profile_values' => 'shared_db.shared_prefix_',
 *      'sequences' => 'shared_db.shared_prefix_',
 *      'sessions' => 'shared_db.shared_prefix_',
 *      'users' => 'shared_db.shared_prefix_',
 *    ),
 *  ),
 * );
 */

function mediacommons_base_import_get_content ( $URL ) {
   $ch = curl_init();
   curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
   curl_setopt($ch, CURLOPT_URL, $URL);
   $data = curl_exec($ch);
   curl_close($ch);
   return $data;
}

function mediacommons_base_import_curl ( $URL ) {
  return mediacommons_base_import_get_content ( $URL ) ;
}

function mediacommons_base_import_default_commands ( ) {
  return array (
    array (
      'label' => t('Import vocabulary and terms'),
      'callback' => array(
        'mediacommons_base_import_generate_vocabulary',
      	'mediacommons_base_import_generate_terms',
      	'mediacommons_base_import_prepare_taxonomy_fields'
      ),
    ),
    array (
      'label' => t('Import roles and users'),
      'callback' => array (
        'mediacommons_base_import_map_roles',
      	'mediacommons_base_import_generate_all_users',
      ),
    ),
  );
}

function mediacommons_base_import_prepare ( $caller ) {

  global $settings;

  include_once __DIR__ . '/mediacommons_base_import.install';

  foreach (file_scan_directory(__DIR__ . '/include/', '/.*\.inc$/') as $include) {
    include_once($include->uri);
  }

  $schemas = mediacommons_base_import_schema();

  $settings = mediacommons_base_import_settings($caller);

  if ( isset ( $settings['dependencies']) ) {
    foreach ( $settings['dependencies'] as $dependency ) {
      if ( ! module_exists ( $dependency ) ) die ( drush_set_error ( t('About to die like a coward. Dependency @dependency not met.', array( '@dependency' => $dependency) ) ) );
    }
  }

  $install_file = $settings['script_path']['dirname'] . '/' . $settings['script_path']['filename'] . '.install';

  $info_file = $settings['script_path']['dirname'] . '/' . $settings['script_path']['filename'] . '.info';

  $includes = file_scan_directory( $settings['script_path']['dirname'], '/.*\.inc$/' );

  foreach ( $includes as $include ) include_once ( $include->uri );

  if ( file_exists ( $install_file ) ) {
    include_once($install_file);
    $call = $settings['script_path']['filename'] . '_schema';
    if ( function_exists( $call ) ) $schemas += $call() ;
  }

  mediacommons_base_import_initialize_schema ( $settigs['script_path']['filename'], $schemas ) ;

  foreach ( $schemas as $name => $schema ) if ( ! db_table_exists ( $name ) ) db_create_table( $name, $schema ) ;

}

function mediacommons_base_import_settings ( $caller ) {

  $script = pathinfo ( $caller ) ;

  $settigs = drupal_parse_info_file ( $script['dirname'] . '/' . $script['filename'] . '.info' )  ;

  if ( $environment = drush_get_option('environment') ) {
    if ( isset ( $settigs['mediacommons']['environments'][$environment] ) ) $settigs['mediacommons']['environment'] = $environment ;
  }

  $settigs['script_path'] = $script ;

  return $settigs ;

}

/** Return a plain node template */
function _mediacommons_base_import_setup_node ( $type ) {
  $node = new StdClass();
  $node->type = $type;
  $node->language = LANGUAGE_NONE;
  $node->promote = 0;
  $node->sticky = 0;
  /** Fills in a few default values */
  node_object_prepare($node);
  return $node;
}

function mediacommons_base_migrate_truncate($string, $limit, $pad = '...') {
  if (strlen($string) <= $limit) return $string;
  return trim(substr($string, 0, $limit)) .  $pad;
}

function mediacommons_base_import_initialize_schema ( $module, &$schema ) {
  // Set the name and module key for all tables.
  foreach ($schema as $name => $table) {
    if (empty($table['module'])) {
      $schema[$name]['module'] = $module;
    }
    if (!isset($table['name'])) {
      $schema[$name]['name'] = $name;
    }
  }
}

// status 1: running

function mediacommons_base_import_run ( $task, array $commands = array() ) {

	$mediacommons_migration_status = array ( ) ;

  if ( isset ( $commands[$task] ) && isset ( $commands[$task]['callback'] ) ) {

  	$mediacommons_migration_status = array (
  		'task' => $commands[$task]['label'] ,
  		'callbacks' => $commands[$task]['callback'],
  		'count' => count ( $commands[$task]['callback'] ) ,
  		'step' => NULL,
  	) ;

    foreach ($commands[$task]['callback'] as $key => $callback) {
      if ( function_exists ( $callback ) ) {

      	$mediacommons_migration_status['step'] = $key ;

      	variable_set('mediacommons_migration_status', json_encode ( $mediacommons_migration_status ) ) ;

      	$callback() ;

      }
    }

  }
  else {
    drush_log('Unable to perform task', 'error');
    mediacommons_base_import_show_options($commands);
  }
}

function mediacommons_base_import_show_help ( array $commands = array() ) {

	drush_print('') ;

  foreach ( $commands as $key => $option ) {
    drush_print( '[' . $key . '] ' . $option['label'] ) ;
  }

  drush_print('') ;

}

function mediacommons_base_import_show_options ( array $commands = array() ) {
  drush_print(t('Please type one of the following options to continue:'));
  mediacommons_base_import_show_help($commands);
  $handle = fopen ("php://stdin","r");
  $line = fgets($handle);
  mediacommons_base_import_run(trim($line), $commands);
}

function mediacommons_base_import_init(array $options = array()) {

  // We need extra memory for GD
  // ini_set("memory_limit", "512MM");

  // http://docs.drush.org/en/master/bootstrap/
  // http://api.drush.org/api/drush/includes%21bootstrap.inc/constant/DRUSH_BOOTSTRAP_DRUPAL_FULL/7.x
  drush_bootstrap(DRUSH_BOOTSTRAP_DRUPAL_FULL);

  global $databases;

  if (!isset($databases['drupal6'])) {
    die(drush_set_error(dt('Unable to find Drupal 6 database.')));
  }

  $trace = debug_backtrace();

  $caller = (isset($trace[0]['file']) ? $trace[0]['file'] : __FILE__);

  $task = drush_get_option('task');

  $default_commands = mediacommons_base_import_default_commands();

  $commands = array_merge($default_commands, $options['commands']);

  // Add exit command to end of the commands options
  $commands[] = array( 'label' => t('Exit'), 'callback' => array( 'drush_exit' ) ) ;

  mediacommons_base_import_prepare($caller);

  $mediacommons_migration_ran = variable_get('mediacommons_migration_ran', NULL) ;

  if (!$mediacommons_migration_ran) variable_set('mediacommons_migration_ran', 1);

  if ($task) {

    foreach ( $commands as $key => $command ) if ( $commands[$key]['label'] == $task ) $action = $key ;

    if ( $action ) mediacommons_base_import_run ( $action, $commands ) ;

    else drush_log('Unable to load task', 'error') ;

  }
  else mediacommons_base_import_show_options( $commands ) ;

}

$trace = debug_backtrace();

$caller = (isset($trace[0]['file']) ? $trace[0]['file'] : __FILE__);

/** This script is meant to be "extended", not to be used by itself. */
if (preg_match('/core.drush.inc/', $caller)) drush_log('Mama told me never talk to strangers', 'error');
